import string
import random
import re

EXCEPTION_TEXT = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–≤—ã–∫, –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å \"–ü–æ–º–æ—â—å\".\
                    \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å \"–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\""
INIT_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞–≤—ã–∫ —Å –∏–≥—Ä–∞–º–∏-–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞–º–∏ –º–µ–∂–¥—É –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏!\n –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –í–∞–º –¥–≤–µ –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –∫–∞–∫ –æ–¥–Ω–æ–º—É, —Ç–∞–∫ –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏:\n\
            üé∂ –ó–Ω–∞–∫–æ–º–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–∫–æ–ª–µ–Ω–∏—è–º –∏–≥—Ä–∞ \"–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é\". –†–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫—ã –∏ —É–∑–Ω–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ç–æ–º, –∫–∞–∫ –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π.\n \
            üìö \"–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞\" - –∏–≥—Ä–∞, —Ä–∞—Å—à–∏—Ä—è—é—â–∞—è –≤–∞—à—É –ª–µ–∫—Å–∏–∫—É. –í –Ω–µ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Å–ª–æ–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —à–∏—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º.\n\
            –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å, —Å–∫–∞–∂–∏—Ç–µ \"–î–∞\""
EMERGENCY_TEXT = "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ —è –∑–∞–≤–µ—Ä—à—É —Ä–∞–±–æ—Ç—É –Ω–∞–≤—ã–∫–∞.\n–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –∏ –º—ã —Å–º–æ–∂–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.\
                    \n–ï—Å–ª–∏ —á—É—Å–≤—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω–æ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É:\
                    \n–¢–µ–ª–µ—Ñ–æ–Ω —Å–∫–æ—Ä–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ - 103."
TEXT_INTRODUCE_MELODY = "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è? –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ \"–£–≥–∞–¥–∞–π –ú–µ–ª–æ–¥–∏—é\"!\n\
                         –í–æ—Ç –∫–∞–∫–∏–µ —É –Ω–µ—ë –ø—Ä–∞–≤–∏–ª–∞:\n –Ø –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é –¥–ª—è –í–∞—Å –æ—Ç—Ä—ã–≤–æ–∫ –º–µ–ª–æ–¥–∏–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏.\n\
                         –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞.\n\
                         –ù–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:\n\
                         üéπ1. –†—É—Å—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã.\n\
                         üéª2. –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã."
HELP_MELODY = "–í–æ—Ç –∫–∞–∫–∏–µ —É –Ω–µ—ë –ø—Ä–∞–≤–∏–ª–∞:\n –Ø –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é –¥–ª—è –í–∞—Å –æ—Ç—Ä—ã–≤–æ–∫ –º–µ–ª–æ–¥–∏–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º–µ–ª–æ–¥–∏–∏.\n\
               –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.\n\
               –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞ - —Å–∫–∞–∂–∏—Ç–µ \"–î–∞\",\n\
               –ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç\" –∏ –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä"
TEXT_INTRODUCE_GUESS_WORD = "–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ \"–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ\"! \n–í —ç—Ç–æ–π –∏–≥—Ä–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–≥–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç \
                            –º–æ–ª–æ–¥–µ–∂—å –∏ –ª—é–¥–∏ —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –±—É–¥–µ—Ç 5 —Å–ª–æ–≤. –í–∞—à–∞ —Ü–µ–ª—å - —É–≥–∞–¥–∞—Ç—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.\
                            \n–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ö–æ—Ç–∏—Ç–µ —É–≥–∞–¥—ã–≤–∞—Ç—å?"
HELP_GUESS_WORD = ""  # TODO

class GuessTheWord:
    def __init__(self):
        self.words = {
            "—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ": {
                "–±–∞—Å—á–µ": "–ª—É—á—à–µ",
                "–∫—É–ª–µ–º–∞": "—É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ –ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ",
                "–≥—É–±–Ω—É—à–∫–∞": "–≥—É–±–Ω–∞—è –ø–æ–º–∞–¥–∞",
                "–≥—É—Ç–∞—Ä–∏—Ç—å": "–±–æ–ª—Ç–∞—Ç—å, –±–µ—Å–µ–¥–æ–≤–∞—Ç—å",
                "—É–º–∞—è—Ç—å—Å—è": "—É—Å—Ç–∞—Ç—å",
                "–¥–∏–≤–∏—Ç—å—Å—è": "–ø–æ—Ä–∞–∂–∞—Ç—å—Å—è —á–µ–º—É-–ª–∏–±–æ",
                "–≤–∞–ª–∞–Ω–¥–∞—Ç—å—Å—è": "—Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –¥–æ–ª–≥–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ",
                "—É—Ö–∞–π–¥–æ–∫–∞—Ç—å—Å—è": "—É—Å—Ç–∞—Ç—å"
            },
            "–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ": {
                "–∫—Ä–∏–Ω–∂": "—á—É–≤—Å—Ç–≤–æ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç–∏ –∏–ª–∏ —Å—Ç—ã–¥–∞ –∑–∞ —á—É–∂–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
                "–∂–∏–∑–∞": "–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —Å–ª—É—á–∞–π",
                "–ø—Ä—É—Ñ": "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
            }
        }
        self.current_word = None
        self.attempts = 0
        self.max_attempts = 3
        self.round_words = []
        self.correct_answers = 0
        self.round_size = 5

    def start_game(self, category):
        if category not in self.words:
            return "–ö–∞–∂–µ—Ç—Å—è, —è –≤–∞—Å –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª–∞."
        self.round_words = random.sample(list(self.words[category].keys()), self.round_size)
        self.current_word = self.round_words.pop(0)
        self.attempts = 0
        self.correct_answers = 0
        return f"–í–æ—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: {self.current_word}. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?"

    def check_answer(self, answer):
        if self.current_word is None:
            return "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É."
        
        correct_answer = self.words["—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ" if self.current_word in self.words["—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"] else "–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ"][self.current_word]
        if answer.lower() == correct_answer.lower():
            self.correct_answers += 1
            result = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {self.current_word} –æ–∑–Ω–∞—á–∞–µ—Ç {correct_answer}."
        else:
            self.attempts += 1
            if self.attempts < self.max_attempts:
                return f"–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {self.max_attempts - self.attempts} –ø–æ–ø—ã—Ç–æ–∫."
            else:
                result = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. {self.current_word} –æ–∑–Ω–∞—á–∞–µ—Ç {correct_answer}."

        if self.round_words:
            self.current_word = self.round_words.pop(0)
            self.attempts = 0
            return f"{result} –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: {self.current_word}. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?"
        else:
            self.current_word = None
            return f"{result} –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ {self.correct_answers}/{self.round_size} —Å–ª–æ–≤! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?"

class Skill:
    def __init__(self):
        self.guess_the_word = GuessTheWord()
        self.state = "INIT"
        self.category = None

    def handle_input(self, user_input):
        if self.state == "INIT":
            if user_input.lower() == "–¥–∞":
                self.state = "CHOOSE_GAME"
                return "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É: –£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é"
            else:
                return INIT_TEXT

        elif self.state == "CHOOSE_GAME":
            if "—É–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞" in user_input.lower():
                self.state = "CHOOSE_CATEGORY"
                return "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º. –í —ç—Ç–æ–π –∏–≥—Ä–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–≥–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–ª–æ–¥–µ–∂—å –∏ –ª—é–¥–∏ —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ö–æ—Ç–∏—Ç–µ —É–≥–∞–¥—ã–≤–∞—Ç—å? –ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ, –°–ª–æ–≤–∞ –º–æ–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, –í—Å–µ –≤–º–µ—Å—Ç–µ"
            elif "—É–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é" in user_input.lower():
                self.state = "MELODY_GAME"
                return TEXT_INTRODUCE_MELODY
            else:
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞' –∏–ª–∏ '–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é'."

        elif self.state == "CHOOSE_CATEGORY":
            if "–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ" in user_input.lower():
                self.category = "–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ"
                self.state = "WORD_GAME"
                return self.guess_the_word.start_game(self.category)
            elif "—Å–ª–æ–≤–∞ –º–æ–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è" in user_input.lower():
                self.category = "—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"
                self.state = "WORD_GAME"
                return self.guess_the_word.start_game(self.category)
            elif "–≤—Å–µ –≤–º–µ—Å—Ç–µ" in user_input.lower():
                self.category = random.choice(["–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ", "—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"])
                self.state = "WORD_GAME"
                return self.guess_the_word.start_game(self.category)
            else:
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ', '–°–ª–æ–≤–∞ –º–æ–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è' –∏–ª–∏ '–í—Å–µ –≤–º–µ—Å—Ç–µ'."

        elif self.state == "WORD_GAME":
            if "–¥–∞" in user_input.lower():
                return self.guess_the_word.start_game(self.category)
            elif "–Ω–µ—Ç" in user_input.lower():
                self.state = "INIT"
                return "–•–æ—Ä–æ—à–æ! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
            elif "—Å–¥–∞—é—Å—å" in user_input.lower():
                return self.guess_the_word.check_answer("—Å–¥–∞—é—Å—å")
            else:
                return self.guess_the_word.check_answer(user_input)

        elif self.state == "MELODY_GAME":
            return HELP_MELODY

        else:
            return EXCEPTION_TEXT


COMPOSER_DICT ={
    "rus_nineteenth":{
        "name": "—Ä—É—Å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ XIX –≤–µ–∫–∞",
        "song_count": 1,
        "songs":[
            {
                "title": r"—É–≤–µ—Ä—Ç—é—Ä",
                "title_pretty": "\"–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É–≤–µ—Ä—Ç—é—Ä–∞ 1812 –≥–æ–¥\"",
                "performer": ["–ü—ë—Ç—Ä –ò–ª—å–∏—á –ß–∞–π–∫–æ–≤—Å–∫–∏–π", r"—á–∞–π–∫–æ–≤—Å–∫"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/20f0649b-cfbb-4a45-b6c0-b5084dd689e1.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–î–∞–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ü–µ–Ω–µ —Ñ–∏–ª—å–º–∞ 2005–æ–≥–æ –≥–æ–¥–∞ \"V - –∑–Ω–∞—á–∏—Ç –í–µ–Ω–¥–µ—Ç—Ç–∞\".",
                    "–ü—ë—Ç—Ä –ò–ª—å–∏—á –ß–∞–π–∫–æ–≤—Å–∫–∏–π –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–≤—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–≤—É–∫ –ø—É—à–µ–∫, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, –≤ –æ—Ä–∫–µ—Å—Ç—Ä–æ–≤–æ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏. \
                    \n–¢–∞–∫–æ–π –ø—Ä–∏—ë–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–≤–∞–Ω–≥–∞—Ä–¥–Ω–æ–π –º—É–∑—ã–∫–µ –∏–ª–∏ –≤ –º—É–∑—ã–∫–µ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤.\n–ó–≤—É–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–∏—Ä–∞ —Ñ–∏–ª—å–º–∞ (–∏—Ö –µ—â—ë –Ω–∞–∑—ã–≤–∞—é—Ç –¥–∏–µ–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏) \
                    —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —á–∞—Å—Ç—å—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏."
                ]
            },
            {
                "title": r"–∫–∞—Ä—Ç–∏–Ω[–∞-—è0-9—ë\s]*–≤—ã—Å—Ç–∞–≤–∫|–∏–∑–±—É—à–∫[–∞-—è0-9—ë\s]*–∫—É—Ä—å–∏—Ö",
                "title_pretty": "\"–ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤—ã—Å—Ç–∞–≤–∫–∏\", —á–∞—Å—Ç—å \"–ò–∑–±—É—à–∫–∞ –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö\"",
                "performer": ["–ú–æ–¥–µ—Å—Ç –ü–µ—Ç—Ä–æ–≤–∏—á –ú—É—Å–æ—Ä–≥—Å–∫–∏–π", r"–º–æ–¥–µ—Å—Ç|–º—É—Å–æ—Ä[–≥]*—Å–∫"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/ebe3d4d4-48e6-4e69-adb7-8095adf2a30e.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–ú–æ–¥–µ—Å—Ç –ú—É—Å–æ—Ä–≥—Å–∫–∏–π –±—ã–ª —á–∞—Å—Ç—å—é –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞ \"–ú–æ–≥—É—á–∞—è –∫—É—á–∫–∞\", –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—ë—Å –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –º—É–∑—ã–∫—É –Ω–∞—Ä–æ–¥–Ω—ã–µ –º–æ—Ç–∏–≤—ã.\
                –†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ —Ñ–æ–ª–∫ —Ç–∞–∫ –∂–µ –æ–±—è–∑–∞–Ω–æ –æ–±—â–µ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –Ω–∞—Ä–æ–¥–Ω–æ–π –º—É–∑—ã–∫–∏ –≤ –æ–±–ª–∞—Å—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞", 
                "–î—Ä—É–≥–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ —Ü–∏–∫–ª–∞ \"–ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤—ã—Å—Ç–∞–≤–∫–∏\" - –ì–Ω–æ–º, –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–º \
                —Ñ–∏–ª—å–º–µ 1998–æ–≥–æ –≥–æ–¥–∞ \"–ë–æ–ª—å—à–æ–π –õ–µ–±–æ–≤—Å–∫–∏\", –∫–∞–∫ —á–∞—Å—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è."]
            }
        ]
    },
    "rus_twentieth":{
        "name": "—Ä—É—Å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ XX –≤–µ–∫–∞",
        "song_count": 1,
        "songs": [
            {
                "title":r"—Ä–æ–º–µ–æ –∏ –¥–∂—É–ª—å–µ—Ç—Ç|—Ç–∞–Ω–µ—Ü —Ä—ã—Ü–∞—Ä|—Ä—ã—Ü–∞—Ä—Å–∫[–∞-—è]{2,3} —Ç–∞–Ω[–µ—Ü]{1}",
                "title_pretty": "–±–∞–ª–µ—Ç \"–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞\", \"–¢–∞–Ω–µ—Ü –†—ã—Ü–∞—Ä–µ–π\"",
                "performer": ["–°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á –ü—Ä–æ–∫–æ—Ñ—å–µ–≤", r"–ø—Ä–æ–∫–æ—Ñ"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/1c4a83a3-196d-40da-8222-d237e13f4e6b.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–ú–µ–ª–æ–¥–∏—è –∏–∑ –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞–ª–∞ –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –ø–µ—Å–Ω–∏ \"Russians\" (1985 –≥–æ–¥) –∑–∞ –∞–≤—Ç–æ—Å—Ç–≤–æ–º –°—Ç–∏–Ω–≥–∞",
                "–ú–µ–ª–æ–¥–∏—è –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–∞–ª–µ—Ç–∞ –ª–µ–≥–ª–∞ –≤ –æ—Å–Ω–æ–≤—É –ø–µ—Å–Ω–∏ \"Party Like a Russian\" (2016 –≥–æ–¥) –∑–∞ –∞–≤—Ç–æ—Å—Ç–≤–æ–º –†–æ–±–±–∏ –£–∏–ª—å—è–º—Å–∞"]
            },
            {  
                "title": r"–ø–æ–ª[–µ—ë]{1}—Ç —à–º–µ–ª|—Å–∫–∞–∑–∫–∞ –æ (—Ü–∞—Ä–µ)*—Å–∞–ª—Ç–∞–Ω",
                "title_pretty": "\"–ü–æ–ª—ë—Ç —à–º–µ–ª—è\" –∏–∑ –æ–ø–µ—Ä—ã \"–°–∫–∞–∑–∫–∞ –æ –¶–∞—Ä–µ –°–∞–ª—Ç–∞–Ω–µ\"",
                "performer": ["–ù–∏–∫–æ–ª–∞–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á –†–∏–º—Å–∫–∏–π-–ö–æ—Ä—Å–∞–∫–æ–≤", r"—Ä–∏–º—Å–∫|–∫–æ—Ä—Å–∞–∫–æ–≤"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/3f2faff3-7471-45c0-9f7e-e6da945e3674.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–≠—Ç–æ—Ç —ç–ø–∏–∑–æ–¥ –æ–ø–µ—Ä—ã - –ø—Ä–∏–º–µ—Ä –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è –≤ –º—É–∑—ã–∫–µ. –ü–æ–ª—ë—Ç —à–º–µ–ª—è —Å—Ç–∞–ª –æ–¥–Ω–∏–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤\
                –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∫—É–ª—å—Ç—É—Ä–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å–≤–∏—è –≤ –∫–∞–¥—Ä–µ –ª–µ—Ç–∞—é—â–∏—Ö –Ω–∞—Å–µ–∫–æ–º—ã—Ö.",
                "–ü–æ–ª—ë—Ç —à–º–µ–ª—è - –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–≤—É–∫–∞ –ø—Ä–∏—Ä–æ–¥—ã –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–≥–ª–∞—Å–Ω–æ –ª–µ–≥–µ–Ω–¥–µ, –ë–µ—Ç—Ö–æ–≤–µ–Ω –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è \
                –≥–æ–ª–æ—Å–æ–º –ø—Ç–∏—Ü—ã –æ–≤—Å—è–Ω–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ü—è—Ç–æ–π –°–∏–º—Ñ–æ–Ω–∏–∏ (–º–µ–ª–æ–¥–∏—é –ø—Ç–∏—á—å–µ–π –ø–µ—Å–Ω–∏ –º–æ–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º \"—Ç–∞ –¥–∞ –¥–∞ –¥–∞–º\")\
                \n–≠—Ç–æ –ø—Ä–∏—ë–º, –∫–æ—Ç–æ—Ä—ã–º —à–∏—Ä–æ–∫–æ –ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ —Å–µ–π—á–∞—Å."] 
            }          
        ]
    },
    "for_early":{
        "name": "—Ä–∞–Ω–Ω–µ–≥–æ –∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞-–∫–ª–∞—Å—Å–∏–∫–∞",
        "song_count": 1,
        "songs": [
            {
                "title": r"—Å–∫–µ—Ä—Ü–æ|—Å—é–∏—Ç|—Ä–µ[-\w]–º–∏–Ω–æ—Ä|—à—É—Ç–∫|badinerie|scherzo",
                "title_pretty": "–°–∫–µ—Ä—Ü–æ(–®—Ç—É–∫–∞) –∏–∑ \"–°—é–∏—Ç—ã –¥–ª—è —Ñ–ª–µ–π—Ç—ã –∏ —Å—Ç—Ä—É–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞ ‚Ññ 2\"",
                "performer": ["–ò–æ–≥–∞–Ω–Ω –°–µ–±–∞—Å—Ç—å—è–Ω –ë–∞—Ö", r"–±–∞—Ö"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/6887a895-98c3-4c9d-a4cf-dcc41d31eeb3.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–ü–æ–¥ –æ–±—â–∏–º –∏–º–µ–Ω–µ–º \"–°–∫–µ—Ä—Ü–æ\" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–æ–≤. \n\
                –≠—Ç–æ –æ—Å–æ–±—ã–π –∂–∞–Ω—Ä –±–∞—Ä–æ—á–Ω–æ–π –º—É–∑—ã–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —à—É—Ç–∫–∏ –∏ –ø–µ—Ä–µ–ª–∏–≤–æ–≤ —Å–º–µ—Ö–∞ —Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å \
                —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏. –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–µ —Ç–æ–∂–µ —Å—É—â–µ—Ç—Å–≤—É—é—Ç –ø—Ä–∏—ë–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è \
                –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π. –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ –¥–ª—è –∫–∏–Ω–æ. –ú–æ–∂–Ω–æ –æ–±–∞—Ä—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ\
                –Ω–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤ –º—É–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—ã–∑—ã–≤–∞–µ—Ç —É –í–∞—Å —Å—Ö–æ–∂–∏–µ —ç–º–æ—Ü–∏–∏."]
            },
            {
                "title": r"–≤—Ä–µ–º[–∞-—è]{1,5} –≥–æ–¥–∞|–∑–∏–º|—á–µ—Ç—ã—Ä[–∞-z]{1,3} —Å–µ–∑–æ–Ω–∞|antonio|quattro|inverno",
                "title_pretty": "–¶–∏–∫–ª –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ \"–í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞\": –ó–∏–º–∞",
                "performer": ["–ê–Ω—Ç–æ–Ω–∏–æ –í–∏–≤–∞–ª—å–¥–∏", r"–∞–Ω—Ç–æ–Ω|–≤[–µ–∏]–≤–∞–ª—å–¥–∏|antonio|vivaldi"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/de7f50cc-f4e0-4b11-ac42-280c992cfebd.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–û—Ç—á—ë—Ç–ª–∏–≤–æ–µ –±–∞—Ä–æ—á–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ \"–í—Ä–µ–º—ë–Ω –≥–æ–¥–∞\" —Å–¥–µ–ª–∞–ª–æ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º –∂–∏–∑–Ω–∏ –≤—ã—Å—à–µ–≥–æ —Å–≤–µ—Ç–∞ \
                –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å–º–∞—Ö. –ß–∞—Å—Ç–æ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–∏–Ω–æ –º–æ–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏–∑ \"–í–µ—Å–Ω—ã\" –≤ —Å—Ü–µ–Ω–∞—Ö –±–æ–≥–µ–º–Ω–æ–π –∂–∏–∑–Ω–∏ \
                –Ω–µ —Ç–æ–ª—å–∫–æ –≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –≤–µ–∫–∞."]
            }

        ]
        
    },
    "for_late":{
        "name": "–ø–æ–∑–¥–Ω–µ–≥–æ –∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ XIX - XX –≤–µ–∫–∞",
        "song_count": 1,
        "songs": [
            {
                "title": r"–ª—É–Ω–Ω[–∞-—è]{2,3} —Å–≤–µ—Ç|clair de lune|—Å—é–∏—Ç|suite",
                "title_pretty": "\"–õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç\" –∏–ª–∏ –ë–µ—Ä–≥–∞–º–∞—Å—Å–∫–∞—è —Å—é–∏—Ç–∞",
                "performer": ["–ö–ª–æ–¥ –î–µ–±—é—Å—Å–∏", r"–∫–ª–æ–¥|–¥–µ–±—é—Å—Å–∏|claude|debussy"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/cce260b1-0d3c-41a8-8eeb-8107c4321ed2.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–ö–ª–æ–¥ –î–µ–±—é—Å—Å–∏ –∏ –¥—Ä—É–≥–∏–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç—ã —Å—Ç–∞–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\
                –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∏–≥—Ä—ã –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç. –ò—Ö –æ—Ç–ª–∏—á–∞–µ—Ç –º—è–≥–∫–æ–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤.\
                \n–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç—ã –∫–∞–∫ –≤ –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–º, —Ç–∞–∫ –∏ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ —Å—Ç–∞—Ä–∞–ª–∏—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏—è.",
                "–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–Ω–æ—Å–∏–ª—Å—è –î–µ–±—é—Å—Å–∏, –∞ —Ç–∞–∫ –∂–µ –≠—Ä–∏–∫ –°–∞—Ç–∏, —Å—Ç–∞–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ \"—ç–º–±–∏–µ–Ω—Ç\", (–æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–≥–æ \"–æ–±–≤–æ–ª–∞–∫–∏–≤–∞—é—â–∏–π\") \
                –æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è —Å–ø–æ–∫–æ–π–Ω—ã–º, —Ç–µ–∫—É—á–∏–º –∑–≤—É—á–∞–Ω–∏–µ–º —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–µ \
                —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–±–ª–∞–≥–æ–∑–≤—É—á–Ω—ã–º–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞–º–∏ —Å–µ–π—á–∞—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è \"–Ω–µ–∑–µ–º–Ω–æ–≥–æ\" –∑–≤—É—á–∞–Ω–∏—è."]
            },
            {
                 "title": r"—á–∞—Ä–¥[–∞—ã]—à|c[sz]rdas",
                "title_pretty": "–ß–∞—Ä–¥–∞—à",
                "performer": ["–í–∏—Ç—Ç–æ—Ä–∏–æ –ú–æ–Ω—Ç–∏", r"–≤–∏–∫?[—Ç]{1,2}–æ—Ä–∏–æ|–º–æ–Ω—Ç–∏|vittorio|monti"],
                "audio_token": "<speaker audio='dialogs-upload/c03dc014-8e23-40d8-a04c-0e5ea7342b91/2bd0d497-333f-430a-994b-6d3ba6a0d4c2.opus'>",
                "hints_title": [],
                "hints_composer": [],
                "facts": ["–§—Ä–∞–≥–º–µ–Ω—Ç, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–µ—Å–Ω–∏ –ê–ª–µ—Ö–∞–Ω–¥—Ä–æ (2009 –≥–æ–¥) –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã\
                 –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –õ–µ–¥–∏ –ì–∞–≥–∞.",
                 "–ú–æ–Ω—Ç–∏, –∫–∞–∫ –∏ \"–ú–æ–≥—É—á–∞—è –∫—É—á–∫–∞\" –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –ò–º–ø–µ—Ä–∏–∏, –≤—ã–≤–µ–ª –Ω–∞—Ä–æ–¥–Ω—ã–π –≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ç–∞–Ω–µ—Ü –≤ —Ä–∞–∑—Ä—è–¥ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏"]
            }
        ]
    }
}


def remove_punct(request_text) -> str:
    if request_text:
        res = request_text.translate(str.maketrans('', '', string.punctuation))
    else:
        res = ''
    return res.strip()

def response_builder(**d):
    key_translate = {
        'ver': "version",
        'ses': "session",
        't': "text",
        'tts': "tts",
        'end': "end_session",
        'direct': "directives",
        'b': "buttons",
        'c': "card_tf",
        'state01': "unwell_trigger",
        'state02': "home",
        'state03': "game_root",
        'state04': "tries",
        'state05': "era",
        'state07': "track",
        'state06': "help",
        'win': "win",
        'title': "first_guess"
    }
    JSON = {}
    response = {}
    session = {}
    for key in d:
        if key in ['ver', 'ses']:
            JSON.update({key_translate[key]: d[key]})
        if key in ['t', 'tts', 'end', 'direct', 'b', 'c']:
            response.update({key_translate[key]: d[key]})
        if key in ['state01', 'state02', 'state03', 
                    'state04','state05','state06', 
                    'state07', 'win', 'title']:
            session.update({key_translate[key]: d[key]})
    JSON.update({"response": response})
    JSON.update({"session_state": session})
    return JSON

def handler(event, context):
    state = event.get("request", {}).get("original_utterance", {})
    button_state = event.get("request", {}).get("payload", {}).get("text", {})
    dialogue_state = event.get("state", {}).get("session", {}).get("unwell_trigger", {})
    saved_state = event.get("state", {}).get("session", {})
    intent = event.get("request", {}).get("nlu", {}).get("intents", {})
    choice_number = intent.get("CUSTOM.MULTIPLE_CHOICE", {}).get("slots", {}).get("number", {}).get("value", {})
    classic_value = intent.get("CUSTOM.CLASSIC", {}).get("slots", {}).get("number", {}).get("value", {})
    surname = []
    for item in event.get("request", {}).get("nlu", {}).get("entities", [{"0": 0}]):
        if item.get("type", {}) == "YANDEX.FIO":
            surname.append(item.get("value", {}).get("last_name", ""))
    tries_pretty = ["–æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É.", "–¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏.", "—Ç—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏."]
    tokens = event.get("request", {}).get("nlu", {}).get("tokens", [])
    end_state = "false"

    
    #Obligatory functions
    if remove_punct(state).lower() == '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' or remove_punct(state).lower() == '—á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ' or button_state == 'code002':
        text = "–ü–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –≤–µ—Å—ë–ª—ã–µ –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –ª—é–¥—è–º \
        —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã üé∂\"–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é\" –∏ üìö\"–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞\" –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º \
        –æ–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n–£—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –∞ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ!\n \
        –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∫–∞–∂–∏—Ç–µ: \"–¥–∞\"."
        buttons = [
            {
                "title": "–î–∞",
                "payload": {
                    "text": "code000"
                 },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b': buttons, 'end': end_state, 'state02': "home"}
    elif intent.get("YANDEX.HELP") and saved_state.get("game_root", {}) == "melody":
        text = HELP_MELODY
        buttons = [
            {
                "title": "–î–∞",
                "payload": {
                    "text": "code007"
                 },
                "hide": "true"
            },
            {
                "title": "–ù–µ—Ç",
                "payload": {
                    "text": "code000"
                },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': saved_state.get("game_root", {}), 'state04': saved_state.get("tries", {}), 
        'state05': saved_state.get("era", {}), 'state06': "melody", 'state07': saved_state.get("track", {}),
        'b': buttons}
    elif (intent.get("YANDEX.HELP") or button_state == 'code001') \
        and not saved_state.get("game_root", {}) == "melody":
        text = "–£ —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\
                üé∂–ò–≥—Ä–∞ \"–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é\" - –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ: \"–ø–µ—Ä–≤–≤—ã–π\"\n \
                üìö–ò–≥—Ä–∞  \"–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞\" - –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ: \"–≤—Ç–æ—Ä–æ–π\"\n \
                ‚ùì–ö–æ–º–∞–Ω–¥–∞ \"–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\" - —è —Ä–∞—Å—Å–∫–∞–∂—É –í–∞–º –æ–± –æ—Å–Ω–æ–≤–Ω–æ–π –∏–¥–µ–µ —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞\n \
                üõèÔ∏è–ï—Å–ª–∏ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å \"–ú–Ω–µ –ø–ª–æ—Ö–æ\" –∏–ª–∏ —è –º–æ–≥—É –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç–æ —Å–∞–º–∞\n \
                –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∫–∞–∂–∏—Ç–µ: \"–¥–∞\"."
        buttons = [
            {
                "title": "–î–∞",
                "payload": {
                    "text": "code000"
                 },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b': buttons, 'end': end_state, 'state02': "home"}

    #Checking user's state
    elif button_state == 'code003' or \
        (dialogue_state == "danger_possibility" and intent.get("YANDEX.CONFIRM")):
        text = EMERGENCY_TEXT
        end_state = "true"
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state}
    elif button_state == 'code004' or \
        (dialogue_state == "danger_possibility" and intent.get("YANDEX.REJECT")):
        text = "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ. –ù–∞ —á—ë–º –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?"
        dialogue_state = {}
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state}
    elif intent.get("CUSTOM.UNWELL"):
        text = "–Ø –æ–±—Ä–∞—Ç–∏–ª–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å.\
        \n–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —Å–∫–∞–∂–∏—Ç–µ \"–î–∞\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ - \"–ù–µ—Ç\""
        buttons = [
            {
                "title": "–î–∞",
                "payload": {
                    "text": "code003"
                 },
                "hide": "true"
            },
            {
                "title": "–ù–µ—Ç",
                "payload": {
                    "text": "code004"
                },
                "hide": "true"
            }
        ]
        dialogue_state = "danger_possibility"
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'b': buttons}
    
    #Home question for games
    elif button_state == 'code000' \
        or (intent.get("YANDEX.CONFIRM") and saved_state.get("home", {}) == "true") \
        or (saved_state.get("game_root", {}) == "melody" and saved_state.get("win", {}) \
         and (button_state == "109" or intent.get("YANDEX.REJECT"))):
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n1. üé∂\"–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é\" \n 2. üìö\"–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞\""
        buttons = [
            {
                "title": "–£–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é",
                "payload": {
                    "text": "code005"
                 },
                "hide": "true"
            },
            {
                "title": "–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞",
                "payload": {
                    "text": "code006"
                },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'b': buttons, 'state02': "false"}

    #The word guessing root
    elif button_state == 'code006' or (saved_state.get("game_root", {}) == "word" and saved_state.get("win", {}) == "true") or (saved_state.get("home", {}) == "false" and (choice_number == "second" or remove_punct(state).lower() == '—É–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞')) or (saved_state.get("game_root", {}) == "word" and saved_state.get("help", {}) == "word" and not button_state == 'code000'):
        text = TEXT_INTRODUCE_GUESS_WORD
        buttons = [
            {
                "title": "–ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ",
                "payload": {
                    "text": "code008"
                 },
                "hide": "true"
            },
            {
                "title": "–°–ª–æ–≤–∞ –º–æ–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
                "payload": {
                    "text": "code009"
                },
                "hide": "true"
            },
            {
                "title": "–í—Å–µ –≤–º–µ—Å—Ç–µ",
                "payload": {
                    "text": "code010"
                },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': "word", 'b': buttons}
    elif saved_state.get("game_root", {}) == "word" and (button_state == 'code008' or button_state == 'code009' or button_state == 'code010'):
        if button_state == 'code008':
            category = "–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ"
        elif button_state == 'code009':
            category = "—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"
        elif button_state == 'code010':
            category = random.choice(["–º–æ–ª–æ–¥–µ–∂–Ω—ã–µ", "—Å—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"])
        
        text = self.guess_the_word.start_game(category)
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': "word", 'state04': self.guess_the_word.attempts, 'state05': category}

    elif saved_state.get("game_root", {}) == "word" and saved_state.get("era", {}):
        category = saved_state.get("era", {})
        text = self.guess_the_word.check_answer(remove_punct(state).lower())
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': "word", 'state04': self.guess_the_word.attempts, 'state05': category}

    elif saved_state.get("game_root", {}) == "word":
        text = "–ù–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É, –¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–∞—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.\n\
        –°–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é —Ñ—Ä–∞–∑—É –∏ —è –≤–µ—Ä–Ω—É –í–∞—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É"
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': saved_state.get("game_root", {}), 'state04': saved_state.get("tries", {}),
        'state05': saved_state.get("era", {}), 'state06': "word"}

    #The melody guessing root:
    elif button_state == 'code005' or (saved_state.get("home", {}) == "false" and \
        (choice_number == "first" or remove_punct(state).lower() == '—É–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é')) or \
        ((saved_state.get("game_root", {}) == "melody" or saved_state.get("game_root", {}) == "melody_composer") and saved_state.get("help", {}) == "melody"\
        and not saved_state.get("tries", {}) and not button_state == 'code000') or \
        (saved_state.get("game_root", {}) == "melody" and saved_state.get("win", {}) \
         and (button_state == "108" or intent.get("YANDEX.CONFIRM"))):
        text = TEXT_INTRODUCE_MELODY
        buttons = [
                    {
                        "title": "üéπ–†—É—Å—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã",
                        "payload": {
                        "text": "code109"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "üéª–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã",
                        "payload": {
                        "text": "code110"
                        },
                        "hide": "true"
                    }
                ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b': buttons, 'end': end_state,
                'state03': "melody_composer"}
    elif saved_state.get("game_root", {}) == "melody_composer" and (button_state or (intent.get("CUSTOM.CLASSIC", {}) and classic_value in ['rus', 'for']) \
        or (choice_number and choice_number != 'third') or saved_state.get("era", {})):
        composer = intent.get("CUSTOM.CLASSIC", {}).get("slots", {}).get("number", {}).get("value", {}) 
        era = saved_state.get("era", {})
        if button_state == "code109" or choice_number == "first" or composer == 'rus' or era == 'rus':
            text = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:\n üé© 1. XIX –≤–µ–∫\n ‚úç2. –ù–∞—á–∞–ª–æ XX –≤–µ–∫–∞"
            tts = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞: –ü–µ—Ä–≤–æ–µ XIX –≤–µ–∫. –í—Ç–æ—Ä–æ–µ: –Ω–∞—á–∞–ª–æ XX –≤–µ–∫–∞"
            buttons = [
                {
                        "title": "üé©XIX –≤–µ–∫",
                        "payload": {
                        "text": "code111"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "‚úç–Ω–∞—á. XX –≤.",
                        "payload": {
                        "text": "code112"
                        },
                        "hide": "true"
                    }
            ]
            res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b': buttons, 'tts': tts, 'end': end_state,
                    'state03': "melody", 'state05': composer}
        if button_state == "code110" or choice_number == "second" or composer == 'for' or era == 'for':
            text = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:\nüìú1. –†–∞–Ω–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã (XVIII –≤.)\n üñãÔ∏è2. –ü–æ–∑–¥–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã (XIX - –Ω–∞—á. XX –≤–≤.)"
            tts = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞: –ü–µ—Ä–≤–æ–µ: –†–∞–Ω–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã (–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π –≤–µ–∫). –í—Ç–æ—Ä–æ–µ:  –ü–æ–∑–¥–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã (–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π - –Ω–∞—á–∞–ª–æ –¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ  –≤+–µ–∫–∞)."
            buttons = [
                {
                        "title": "üìú–†–∞–Ω–Ω–∏–µ (XVIII –≤.)",
                        "payload": {
                        "text": "code111"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "üñãÔ∏è–ü–æ–∑–¥–Ω–∏–µ(XIX - –Ω–∞—á. XX –≤–≤.)",
                        "payload": {
                        "text": "code112"
                        },
                        "hide": "true"
                    }
            ]
            res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b': buttons, 'tts': tts, 'end': end_state,
                    'state03': "melody", 'state05': composer}
    elif saved_state.get("game_root", {}) == "melody" and (((intent.get("CUSTOM.CLASSIC", {}) and classic_value not in ['rus', 'for'])\
        and not saved_state.get("track", {})) or (button_state in ['code112', 'code111']) or (choice_number and choice_number != 'third') or (saved_state.get("help", {}) == "melody"\
        and saved_state.get("tries", {}) > 0  and not button_state == 'code000')):
        if saved_state.get("era", {}) == 'rus' and (classic_value in ['twentieth', 'nineteenth'] \
            or button_state or choice_number):
            dict_states = {
                "code111": "nineteenth",
                "code112": "twentieth",
                "first": "nineteenth",
                "second": "twentieth"
            }
            pre_era = saved_state.get("era", {})
            if intent.get("CUSTOM.CLASSIC", {}):
                state_5 = pre_era + '_' + classic_value
            elif button_state:
                state_5 = pre_era + '_' + dict_states[button_state]
            elif choice_number:
                state_5 = pre_era + '_' + dict_states[choice_number]
            era = COMPOSER_DICT.get(state_5, {})
            rand_song = random.randint(0, len(era.get("songs")) - 1)
            text = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + ".\n –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            tts = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + " " +  era.get("songs", [])[rand_song].get("audio_token", {}) + " . –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            res = {'ver': event["version"], 'ses': event["session"], 't': text, 'tts':tts, 'end': end_state,
            'state03': "melody", 'state04': 3, 'state05': state_5, 'state07': rand_song}
        elif saved_state.get("era", {}) == 'for' and (intent.get("CUSTOM.CLASSIC", {}) \
            or button_state or choice_number):
            dict_states = {
                "code111": "early",
                "code112": "late",
                "first": "early",
                "second": "late"
            }
            pre_era = saved_state.get("era", {})
            if classic_value in ['late', 'early']:
                state_5 = pre_era + '_' + classic_value
            elif classic_value in ['twentieth', 'nineteenth']:
                state_5 = pre_era + '_late'
            elif button_state:
                state_5 = pre_era + '_' + dict_states[button_state]
            elif choice_number:
                state_5 = pre_era + '_' + dict_states[choice_number]
            era = COMPOSER_DICT.get(state_5, {})
            rand_song = random.randint(0, len(era.get("songs")) - 1)
            text = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + ".\n –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            tts = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + " " +  era.get("songs", [])[rand_song].get("audio_token", {}) + " . –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            res = {'ver': event["version"], 'ses': event["session"], 't': text, 'tts':tts, 'end': end_state,
            'state03': "melody", 'state04': 3, 'state05': state_5, 'state07': rand_song}
        elif saved_state.get("help", {}) == "melody":
            state_5 =saved_state.get("era", {})
            era = COMPOSER_DICT.get(state_5)
            rand_song = saved_state.get("track", {})
            text = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + ".\n –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            tts = "–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è " + era.get("name") + " " +  era.get("songs", [])[rand_song].get("audio_token", {}) + " . –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞!"
            res = {'ver': event["version"], 'ses': event["session"], 't': text, 'tts':tts, 'end': end_state,
            'state03': "melody", 'state04': 3, 'state05': state_5, 'state07': rand_song}
        # else:
        #     text = "–ö–∞–∂–µ—Ç—Å—è, –≤—ã–±–æ—Ä –ø—Ä–æ—à—ë–ª –Ω–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ.\n –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥."
        #     res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        #     'state03': "melody_composer", 'state05':saved_state.get("era", {}), 'state07': saved_state.get("track", {})}
    elif saved_state.get("game_root", {}) == "melody" and saved_state.get("track", -1) >= 0 \
        and saved_state.get("tries", -1) > 0:
        song_num = saved_state.get("track", {})
        state_5 = saved_state.get("era", {})
        fact = random.choice(COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("facts", {}))
        right_names = COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("performer", {})[1]
        right_name = COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("performer", {})[0]
        right_title = COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("title", {})
        title_to_show = COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("title_pretty", {})
        if saved_state.get("first_guess", {}) == "true":
            win = re.search(right_title, remove_punct(state).lower())
            if win:
                text = "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! –≠—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ " + title_to_show + ", –µ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä: " + right_name + "\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: " + fact + "\n" +  "\n –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≥–∞–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Å–∫–∞–∂–∏—Ç–µ \"–î–∞\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã - \"–ù–µ—Ç\""
                buttons = [
                    {
                        "title": "–î–∞",
                        "payload": {
                        "text": "code108"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "–ù–µ—Ç",
                        "payload": {
                        "text": "code109"
                        },
                        "hide": "true"
                    }
                ]
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'b':buttons, 'end': end_state,
                        'state03': "melody", 'win': "true"}                
            elif saved_state.get("tries", -1) == 1 and not win:
                text_start = ["–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–ª–∞—Å—Å–∏–∫–∏ –Ω–µ —Å—Ä–∞–∑—É –ø–æ–¥–¥–∞—é—Ç—Å—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—é.\n  –≠—Ç–æ –±—ã–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è ", "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!  –≠—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ", "–ú—É–∑—ã–∫–∞ - –≤–µ—â—å –∑–∞–≥–∞–¥–æ—á–Ω–∞—è! \n –≠—Ç–∞ –º–µ–ª–æ–¥–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å –¥–ª—è –í–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π. \n–≠—Ç–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ "]
                text_end = ["–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?", "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å –¥—Ä—É–≥—É—é –º–µ–ª–æ–¥–∏—é?", "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É?"]
                text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.\n" + random.choice(text_start) + title_to_show + "\n–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä: " + right_name + "\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: " + fact + "\n" + random.choice(text_end) 
                buttons = [
                    {
                        "title": "–î–∞",
                        "payload": {
                        "text": "code108"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "–ù–µ—Ç",
                        "payload": {
                        "text": "code109"
                        },
                        "hide": "true"
                    }

                ]
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
                    'state03': "melody", 'state05':saved_state.get("era", {}),
                    'state07': saved_state.get("track", {}), 'b': buttons, 'win': "fail"}
            else:
                tries = saved_state.get("tries", {}) - 1
                text = "–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –µ—â—ë " + tries_pretty[saved_state.get("tries", {}) - 2]
                tts = "–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –µ—â—ë " + tries_pretty[saved_state.get("tries", {}) - 2] + " " + COMPOSER_DICT.get(state_5, {}).get("songs", [])[song_num].get("audio_token", {})
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
                        'state03': "melody", 'state04': tries, 'state05':saved_state.get("era", {}), 
                        'state07': saved_state.get("track", {}), 'title': "true", 'tts': tts}
        elif saved_state.get("first_guess", {}) != "true":
            if re.search(right_names, remove_punct(state).lower()):
                text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç—É –º–µ–ª–æ–¥–∏—é –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä " + right_name + "!\n –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∞–º—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é."
                tts = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç—É –º–µ–ª–æ–¥–∏—é –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä " + right_name + "! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∞–º—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é." + " " + COMPOSER_DICT.get(state_5, {}).get("songs", [])[song_num].get("audio_token", {})
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
                        'state03': "melody", 'state04': 3, 'state05':saved_state.get("era", {}), 
                        'state07': saved_state.get("track", {}), 'title': "true", 'tts':tts}
            elif saved_state.get("tries", -1) == 1 and not re.search(right_names, remove_punct(state).lower()):
                right_name = COMPOSER_DICT.get(state_5, {}).get("songs", {})[song_num].get("performer", [])[0]
                text_start = ["–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–ª–∞—Å—Å–∏–∫–∏ –Ω–µ —Å—Ä–∞–∑—É –ø–æ–¥–¥–∞—é—Ç—Å—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—é.\n  –≠—Ç–æ –±—ã–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è ", "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!  –≠—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ", "–ú—É–∑—ã–∫–∞ - –≤–µ—â—å –∑–∞–≥–∞–¥–æ—á–Ω–∞—è! \n –≠—Ç–∞ –º–µ–ª–æ–¥–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å –¥–ª—è –í–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π. \n–≠—Ç–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ "]
                text_end = ["–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?", "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å –¥—Ä—É–≥—É—é –º–µ–ª–æ–¥–∏—é?", "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É?"]
                text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.\n" + random.choice(text_start) + title_to_show + "\n–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä: " + right_name + "\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: " + fact + "\n" + random.choice(text_end) 
                buttons = [
                    {
                        "title": "–î–∞",
                        "payload": {
                        "text": "code108"
                        },
                        "hide": "true"
                    },
                    {
                        "title": "–ù–µ—Ç",
                        "payload": {
                        "text": "code109"
                        },
                        "hide": "true"
                    }

                ]
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
                    'state03': "melody", 'state05':saved_state.get("era", {}), 
                    'state07': saved_state.get("track", {}), 'b': buttons, 'win': "fail"}
            else:
                tries = saved_state.get("tries", {}) - 1
                text = "–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—â—ë " + tries_pretty[saved_state.get("tries", {}) - 2]
                tts = "–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –µ—â—ë " + tries_pretty[saved_state.get("tries", {}) - 2] + " " +  COMPOSER_DICT.get(state_5, {}).get("songs", [])[song_num].get("audio_token", {})
                res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
                        'state03': "melody", 'state04': tries, 'state05':saved_state.get("era", {}),
                        'state07': saved_state.get("track", {}), 'tts': tts}
    
    # exception for melody
    elif saved_state.get("game_root", {}) == "melody" or saved_state.get("game_root", {}) == "melody_composer":
        text = "–ù–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É, –¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–∞—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.\n\
        –°–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é —Ñ—Ä–∞–∑—É –∏ —è –≤–µ—Ä–Ω—É –í–∞—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É"
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'state03': saved_state.get("game_root", {}), 'state04': saved_state.get("tries", {}), 
        'state05': saved_state.get("era", {}), 'state06': "melody", 'state07': saved_state.get("track", {})}
    
    elif len(state) == 0:
        text = INIT_TEXT
        buttons = [
            {
                 "title": "–î–∞",
                "payload": {
                    "text": "code000"
                 },
                "hide": "true"
            },
            {
                "title": "–ü–æ–º–æ—â—å",
                "payload": {
                    "text": "code001"
                 },
                "hide": "true"
            },
            {
                "title": "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
                "payload": {
                    "text": "code002"
                },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'b': buttons, 'state02': "true"}
    else:
        text = EXCEPTION_TEXT
        buttons = [
            {
                "title": "–ü–æ–º–æ—â—å",
                "payload": {
                    "text": "code001"
                 },
                "hide": "true"
            },
            {
                "title": "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
                "payload": {
                    "text": "code002"
                },
                "hide": "true"
            }
        ]
        res = {'ver': event["version"], 'ses': event["session"], 't': text, 'end': end_state,
        'b': buttons}
    res.update({'state01': dialogue_state})
    return response_builder(**res)
